# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

- name: DNS | Check if NetworkManager is being used
  raw: systemctl status NetworkManager --no-pager
  register: network_manager_in_use
  ignore_errors: True

- name: DNS | Disable network NetworkManager management of resolv.conf
  when: network_manager_in_use | succeeded
  ini_file:
    path: /etc/NetworkManager/NetworkManager.conf
    section: main
    option: dns
    value: none

- name: DNS | get existing conf from resolv.conf
  block:
    - name: get existing nameserver list
      shell: cat /etc/resolv.conf  | grep -v '^#' | grep nameserver | awk '{print $2}'
      register: existing_ns

    - name: get search domain list
      shell: cat /etc/resolv.conf  | grep -v '^#' | grep search | sed -n 's/search //p'
      register: existing_sd

    - name: set default dns
      set_fact:
        def_dns: "10.96.0.10"

    - name: add default dns to external dns list
      set_fact:
        external_dns_nameservers: "{{ external_dns_nameservers }} + [ '{{ def_dns }}' ]"

    - name: search the nameserver already present
      shell: grep "{{ item }}" /etc/resolv.conf
      register: ns_info
      with_items: "{{ external_dns_nameservers }}"
      ignore_errors: yes

    - name: Init modified_dns variable
      set_fact:
        modified_dns_nameservers: []

    - name: check the result about search
      set_fact:
        modified_dns_nameservers: "[ '{{ item.item }}' ] + {{ modified_dns_nameservers }}"
      with_items:
        - "{{ ns_info.results }}"
      when: item.rc != 0

    - name: insert existing nameserver list to external_dns_nameservers
      set_fact:
        modified_dns_nameservers: "[ '{{ item }}' ] + {{ modified_dns_nameservers }}"
      when: existing_ns is success
      with_items:
        - "{{ existing_ns.stdout_lines }}"

    - name: initialize old_sd var
      set_fact:
        old_sd: ""

    - name: set old_sd var
      set_fact:
        old_sd: "{{ existing_sd.stdout }}"
      when: existing_sd is success

    - name: update the external list
      set_fact:
        external_dns_nameservers: "{{ modified_dns_nameservers }}"

- name: DNS | load new resolv.conf
  template:
    unsafe_writes: yes
    src: resolv.conf.j2
    dest: /etc/resolv.conf

- name: DNS | Restarting NetworkManager
  when: network_manager_in_use | succeeded
  block:
    - name: DNS | Restarting NetworkManager Service
      systemd:
        name: NetworkManager
        state: restarted
        daemon_reload: yes
        enabled: yes
        masked: no
    - pause:
        seconds: 5
    - name: DNS | Waiting for connectivity to be restored to outside world
      shell: if ! [[ $(ip -4 route list 0/0 | head -c1 | wc -c) -ne 0 ]]; then exit 1; fi
      register: task_result
      until: task_result.rc == 0
      retries: 120
      delay: 5
      args:
        executable: /bin/bash
